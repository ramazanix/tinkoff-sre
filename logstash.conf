input {
  beats {
    port => "5044"
  }
}


filter {
  if [container][image][name] =~ /mysql/ {
  grok {
    match => {
      "message" => "%{TIMESTAMP_ISO8601:timestamp} %{NUMBER:thread_id} \[%{WORD:level}\] %{GREEDYDATA:new_message}"
    }
  }
  if [new_message] {
    mutate {
      replace => { "message" => "%{new_message}" }
      remove_field => ["new_message"]
    }
  }
  if [level] == "Note" {
    mutate { replace => { "level" => "info"} }
  }
  if [level] == "Warning" {
    mutate { replace => { "level" => "warn"} }
  }
  date {
    match => ["timestamp", "ISO8601" ]
    target => "@timestamp"
    }
  }

  if [container][image][name] =~ /oncall-web/ {
    grok {
      pattern_definitions => {
          "CUSTOM_DATE" => "%{MONTHDAY}/%{MONTH}/%{YEAR}:%{HOUR}:%{MINUTE}:%{SECOND} %{ISO8601_TIMEZONE}"
          "CUSTOM_REFERER" => "%{URI}|-"
      }
      match => { 
        "message" => "%{CUSTOM_DATE:datetime} \[%{INT:status}\] %{WORD:method} %{URIPATHPARAM:endpoint} %{IPV4:addr} \[%{DATA:uagent}\] RT:%{INT:msecs} REF:%{CUSTOM_REFERER:referer} SZ:%{INT:size} %{DATA:http_proto}"
      }
      overwrite => ["message"]
      add_tag =>  ["grok_tokenized"] 
    }

    date {
      match => ["datetime", "dd/MMM/yyyy:HH:mm:ss Z", "ISO8601"]
      target => "@timestamp"
      remove_field => ["datetime"]
    }
  }
}

output {
 elasticsearch {
   index => "logstash"
   hosts=> "${ELASTIC_HOSTS}"
   user=> "${ELASTIC_USER}"
   password=> "${ELASTIC_PASSWORD}"
   cacert=> "certs/ca/ca.crt"
 }
}

